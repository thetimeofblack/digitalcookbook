package CookBookView.editview;

import javafx.scene.control.TextArea;
import javafx.scene.control.ScrollPane;

import java.io.IOException;
import java.net.URL;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ResourceBundle;

import CookBookDataBaseAcess.DatabaselayerObject;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;

import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.*;
import javafx.scene.*;
import CookBookEntity.Ingredient;
import CookBookEntity.PreparationStep;
import CookBookEntity.Recipe;
import CookBookView.firstview.fvController;
import CookBookView.listview.ListAllController;
import CookBookView.searchview.SearchViewController;
import DigitalCookbook.CookBook;
public class editpaneController implements Initializable {
	@FXML
	private Label star5;
	@FXML
	private Label favourite;
	@FXML
	private Button logout;
	@FXML
	private Label user;
	@FXML
	private TextField servingperson;
	@FXML
	private Label ingredient;
	
	@FXML
	private Button cancel;
	private DatabaselayerObject dao;
	private Stage stage ;
	private Scene scene; 
	@FXML
	private TextArea recipename; 
	@FXML
	private TextArea preparationTime; 
	@FXML
	private TextArea Category;
	@FXML
	private Pane mainPane; 
	@FXML
	private TextArea Cooktime ;
	private Pane subinPane;
	
	private Pane substPane;
	
	private Pane subcmPane; 
	@FXML
	private ScrollPane scrollpane;
	
	
	private boolean subin ; 
	private boolean subsp; 
	private boolean subcm ;
	// Event Listener on Label[#favourite].onDragDetected
	
	private Recipe recipe ;
	private Recipe previousrecipe;
	private LinkedList<Ingredient> ingredients ;
	private LinkedList<PreparationStep> steps ;
	private CookBook cookbook ; 
	
	@Override
	public void initialize(URL location, ResourceBundle resources){
		System.out.println("initialize");
	}
	
	@FXML
	public void choosetobeFavourite(MouseEvent event) throws Exception {
		this.cookbook.setFavourite(recipe.getRecipeID());
	}
	
	// Event Listener on Button[#logout].onAction
	@FXML
	public void logOut(ActionEvent event) throws Exception{
		FXMLLoader loader = new FXMLLoader(getClass().getResource("../firstview/fv.fxml"));
		Parent root = loader.load();
		fvController controller = loader.getController();
		controller.setStageAndScene(stage, scene);
		scene.setRoot(root);
		stage.setScene(scene);
		stage.show();
	}
	// Event Listener on TextField[#servingperson].onAction
	@FXML
	public void servingPerson(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Label[#ingredient].onDragDetected
	@FXML
	public void editIngredients() throws Exception {
		if(this.subin==false && !this.ingredients.isEmpty())
		{
		FXMLLoader loader = new FXMLLoader(getClass().getResource("ingredient.fxml"));
		this.subinPane = (Pane)loader.load();
		inpaneController controller = loader.getController(); 
		VBox ingredientvbox = controller.getVBox(); 
		Iterator<Ingredient> iterator = this.ingredients.iterator(); 
		while(iterator.hasNext()) {
			Ingredient ingredient = iterator.next(); 
			FXMLLoader hboxloader = new FXMLLoader(getClass().getResource("inpanehbox.fxml"));
			HBox hBox = hboxloader.load();
			TextField Name = (TextField) hBox.getChildren().get(0);
			TextField Usage= (TextField) hBox.getChildren().get(1);
			TextField Unit =(TextField)hBox.getChildren().get(2);
			TextField Description = (TextField)hBox.getChildren().get(3);
			Name.setText(ingredient.getName());
			Usage.setText(String.valueOf(ingredient.getAmount()));
			Unit.setText(ingredient.getUnit());
			Description.setText(ingredient.getDescription());
			ingredientvbox.getChildren().add(hBox);
			System.out.println("add ingredients");
		}
		
		this.subin = true; 
		System.out.println("show ingredient");
		
		}
		System.out.println("show ingredient");
		this.scrollpane.setContent(this.subinPane);
	}
	
	public void editsteps() throws Exception {
		if(this.subsp == false && !recipe.getPreparationSteps().isEmpty()){
		FXMLLoader loader = new FXMLLoader(getClass().getResource("steppane.fxml"));
		this.substPane = (Pane) loader.load(); 
		StepController controller = loader.getController(); 
		this.steps = this.recipe.getPreparationSteps();
		controller.setSteps(this.steps);
		controller.showSteps();
		}
		this.scrollpane.setContent(this.substPane);
	}
	
	public void editcomments() throws Exception  {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("commentpane.fxml"));
		this.subcmPane = loader.load(); 
		
		this.scrollpane.setContent(this.subcmPane);
		
	}
	// Event Listener on Button[#cancel].onAction
	@FXML
	public void back(ActionEvent event) throws Exception {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("../listview/listall.fxml"));
		Parent root = loader.load();
		ListAllController controller = loader.getController();
		controller.setStageAndScene(stage, scene);
		//controller.setDatabaselayerObject(databaselayerObject);
		controller.setCookBook(this.cookbook);
		controller.createAllRecipeSubView();
		
		scene.setRoot(root);
		stage.setScene(scene);
		stage.show();
	}
	
	public void setScene(Scene scene) {
		this.scene  = scene; 
		
	}
	public void setStage(Stage stage) {
		this.stage = stage ;
	}
	
	public void setDataBase(DatabaselayerObject database) {
		this.dao = database; 
		
	}
	
	public void createRecipe() {
		this.recipe = new Recipe() ; 
		recipe.setCategory(this.Category.getText());
		recipe.setPreparationTime(Integer.parseInt(this.preparationTime.getText()));
		recipe.setServeNumber(Integer.parseInt(this.servingperson.getText()));
		recipe.setName(this.recipename.getText());
		recipe.setIngredientlist(this.ingredients);
		recipe.setPreparationSteps(this.steps);
		
		System.out.println(this.recipe.toString());
	}
	
	public void setCookBook(CookBook cookbook) {
		this.cookbook = cookbook ; 
	}
	
	public Recipe getRecipe() {
		return this.recipe; 
	}
	
	public void setRecipe(Recipe recipe) {
		this.recipe = recipe; 
	}
	
	public void showRecipe() {
		this.recipename.setText(recipe.getName());
		this.preparationTime.setText(String.valueOf(recipe.getPrepareTime())); 
		this.Category.setText(recipe.getCategory());
		this.Cooktime.setText(String.valueOf(recipe.getCookTime()));
		this.servingperson.setText(String.valueOf(recipe.getServeNumber()));
		this.ingredients= recipe.getIngredientlist(); 
		this.steps = recipe.getPreparationSteps(); 
	}
	
	public void editRecipe() throws Exception{
		this.createRecipe();
		cookbook.deleteUserRecipe(this.recipe.getRecipeID());
		cookbook.saveRecipe(this.recipe);
		FXMLLoader loader = new FXMLLoader(getClass().getResource("../searchview/searchView.fxml"));
		Parent root = loader.load(); 
		SearchViewController controller = loader.getController();
		controller.setScene(this.scene);
		controller.setStage(this.stage);
		controller.setCookBook(this.cookbook);
		this.scene.setRoot(root);
		this.stage.setScene(this.scene);
	}

	
}
