package CookBookView.detailview;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;

import java.security.KeyStore.PrivateKeyEntry;
import java.util.Iterator;
import java.util.LinkedList;

import javax.xml.ws.AsyncHandler;

import org.hamcrest.core.SubstringMatcher;

import CookBookEntity.Ingredient;
import CookBookEntity.Recipe;
import DigitalCookbook.CookBook;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.image.ImageView;

import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.scene.image.ImageView;

public class MaindetailController {
	@FXML
	private Label recipeName;
	@FXML
	private Label star1;
	@FXML
	private Label star2;
	@FXML
	private Label star3;
	@FXML
	private Label star4;
	@FXML
	private Label star5;
	@FXML
	private Label preparationTime;
	@FXML
	private Label category;
	@FXML
	private Label cookTime;
	@FXML
	private Label favourite;
	@FXML
	private Button logout;
	@FXML
	private Label user;
	@FXML
	private TextField servingperson;
	@FXML
	private Label ingredient;
	@FXML
	private Label deletelabel;
	
	@FXML
	private ImageView  delete;
	
	@FXML
	private ScrollPane scrollpane;
	
	@FXML
	private ImageView editImage;
	
	private Recipe recipe;
	
	private Stage stage; 
	
	private Scene scene; 
	
	private CookBook cookbook;
	
	private Pane subinpane; 
	
	private Pane substpane; 
	
	private Pane subcmpane; 
	
	private boolean subsm = false ;
	private boolean subin = false ; 
	private boolean subst = false ;
	// Event Listener on Label[#favourite].onDragDetected
	@FXML
	public void choosetobeFavourite(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#logout].onAction
	@FXML
	public void logOut(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on TextField[#servingperson].onAction
	@FXML
	public void servingPerson(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Label[#ingredient].onDragDetected
	@FXML
	public void showIngredients(MouseEvent event) throws Exception {
		// TODO Autogenerated
		LinkedList<Ingredient> ingredientlist = recipe.getIngredientlist();
		if(this.subin==false && !ingredientlist.isEmpty())
		{
		FXMLLoader loader = new FXMLLoader(getClass().getResource("ingredientpane.fxml"));
		this.subinpane = (Pane)loader.load();
		IngredientController controller = loader.getController(); 
		VBox ingredientvbox = controller.getVBox(); 
		Iterator<Ingredient> iterator = ingredientlist.iterator(); 
		while(iterator.hasNext()) {
			Ingredient ingredient = iterator.next(); 
			FXMLLoader hboxloader = new FXMLLoader(getClass().getResource("inpanehbox.fxml"));
			HBox hBox = hboxloader.load();
			Text Name = (Text) hBox.getChildren().get(1);
			Text Usage= (Text) hBox.getChildren().get(2);
			Text Unit =(Text)hBox.getChildren().get(3);
			Text Description = (Text)hBox.getChildren().get(4);
			Name.setText(ingredient.getName());
			Usage.setText(String.valueOf(ingredient.getAmount()));
			Unit.setText(ingredient.getUnit());
			Description.setText(ingredient.getDescription());
			ingredientvbox.getChildren().add(hBox);
		}
		
		this.subin = true; 
		System.out.println("show ingredient");
		
		}else {
			System.out.println("recipe does not has ingredients");
			return;
		}
		System.out.println("show ingredient");
		this.scrollpane.setContent(subinpane);
		
		
	}
	
	public ScrollPane getpane() {
		return this.scrollpane;
	}
	public void setPane(VBox vbox) {
		this.scrollpane.setContent(vbox);
	}
	
	public void setRecipe(Recipe recipe) {
		this.recipe = recipe;
	}
	
	public void deleteRecipe() {
		
	}
	
	public void editRecipe() {
		
	}
	
	public void setStage(Stage stage) {
		this.stage  = stage ;
	}
	
	public void setScene(Scene scene) {
		this.scene = scene; 
	}
	
	public void showbasicRecipe() {
		this.recipeName.setText(recipe.getName());
		this.preparationTime.setText(String.valueOf(recipe.getPrepareTime())); 
		this.category.setText(recipe.getCategory());
		this.cookTime.setText(String.valueOf(recipe.getCookTime()));
		this.servingperson.setText(String.valueOf(recipe.getServeNumber()));
		
	}
	
	public void setCookBook(CookBook cookbook) {
		this.cookbook = cookbook;
	}
	
	public void showPreparationStep() {
		
	}
	
	public void showComment() {
		
	}
}
